@page "/"
@rendermode InteractiveServer
@implements IDisposable
@inject IJSRuntime JSRuntime  

<PageTitle>POKER: 9 MARS 2024</PageTitle>

<Layout>
    <LayoutHeader TextAlignment="TextAlignment.Center"
                  Background="Background.Dark"
                  TextColor="TextColor.White"
                  Padding="Padding.Is3">
       <Heading Size="HeadingSize.Is1">POKER 40</Heading>
    </LayoutHeader>
    <LayoutContent Background="Background.Body"
                   TextColor="TextColor.Body"
                   Padding="Padding.Is3">
        
        @if (_scoreBoard.IsRegisteringPlayers())
        {
            <Container>
                <Row>
                    <Column ColumnSize="ColumnSize.Is8" TextAlignment="TextAlignment.Center">
                        <Image Source="img/swish-QR-large.png" Width="Width.Is50"></Image>
                    </Column>
                    <Column ColumnSize="ColumnSize.Is4">

                        <RegisterPlayer OnRegisterPlayer="AddPlayer" OnStartPlay="StartPlaying"></RegisterPlayer>
                        <RegisteredPlayers Players="_scoreBoard.ListPlayers()"></RegisteredPlayers>
                    </Column>
                </Row>
            </Container>
        }
        else
        {
            <Container>
                <Row>
                    <Column ColumnSize="ColumnSize.Is8">
                        <Card Margin="Margin.Is2">
                            <CardHeader Background="Background.Primary"
                                        TextColor="TextColor.White">
                                Spelare
                            </CardHeader>
                            <CardBody>
                                <CardText>

                                    <Table>
                                        <TableHeader>
                                            <TableRow>
                                                <TableHeaderCell>#</TableHeaderCell>
                                                <TableHeaderCell>Spelare</TableHeaderCell>
                                                <TableHeaderCell ColumnSpan="2">Runda 1</TableHeaderCell>
                                                <TableHeaderCell ColumnSpan="2">Runda 2</TableHeaderCell>
                                                <TableHeaderCell>Total poäng</TableHeaderCell>
                                                <TableHeaderCell></TableHeaderCell>
                                            </TableRow>
                                        </TableHeader>
                                        <TableBody>
                                            @foreach (var row in _scoreBoard.ScoreTable(_scoreAlgorithm))
                                            {
                                                <TableRow @key="@row.Player.Name">
                                                    <TableRowHeader>@row.Position</TableRowHeader>
                                                    <TableRowCell>@row.Player.Name</TableRowCell>
                                                    <TableRowCell>@PrintPosition(row.Player, 0)</TableRowCell>
                                                    <TableRowCell>@PrintScore(row, 0)</TableRowCell>
                                                    <TableRowCell>@PrintPosition(row.Player, 1)</TableRowCell>
                                                    <TableRowCell>@PrintScore(row, 1)</TableRowCell>
                                                    <TableRowCell>@row.TotalScore p</TableRowCell>
                                                    <TableRowCell>
                                                        @if (row.IsStillInTheGame)
                                                        {
                                                            <Button Color="Color.Primary" @onclick="() => Out(row.Player)">Ute</Button>
                                                        }
                                                    </TableRowCell>
                                                </TableRow>
                                            }
                                        </TableBody>
                                    </Table>

                                </CardText>
                            </CardBody>
                        </Card>

                    </Column>
                    <Column ColumnSize="ColumnSize.Is4">
                        <PointsTable ScoreTable="_scoreAlgorithm.GetScoreTable()"></PointsTable>
                        <Prizes PrizeRows="_prizeRows"></Prizes>
                        </Column>
                </Row>
            </Container>
        }


    </LayoutContent>
    <LayoutFooter TextAlignment="TextAlignment.Center"
                  Background="Background.Dark"
                  TextColor="TextColor.White"
                  Padding="Padding.Is3"
                  Fixed="true">
        <Button Float="Float.End" Margin="Margin.Is2" 
                @onclick="Undo" 
                Color="Color.Light" 
                TextColor="TextColor.Primary"
                Disabled="!_memento.CanUndo()"
                >Ångra</Button>
        <Button Float="Float.End" Margin="Margin.Is2" 
                @onclick="Redo" 
                Color="Color.Light" 
                TextColor="TextColor.Primary"
                Disabled="!_memento.CanRedo()">Gör om</Button>
    </LayoutFooter>
</Layout>



@code {
    private const decimal BUY_IN = 250;
    private PrizeTable _prizeTable = new PrizeTable(BUY_IN);
    private ScoreBoard _scoreBoard = new ScoreBoard();
    private IScoreAlgorithm _scoreAlgorithm = new ProcentProgressiveAlgorithm(1000, 0);
    private Memento<string> _memento = new Memento<string>();
    private IEnumerable<PrizeRow> _prizeRows = Enumerable.Empty<PrizeRow>();

    protected override async Task OnInitializedAsync()
    {
        _scoreBoard.OnChange += ScoreBoardOnOnChange;
        
        
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await base.OnAfterRenderAsync(firstRender);
            return;
        }

        
        var state = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "STATE");
        if (!string.IsNullOrEmpty(state))
        {
            _memento = Memento<string>.Create(state);
            _scoreBoard.LoadState(_memento.GetLastState());
            _prizeRows = _prizeTable.GetPrizeTable(_scoreBoard.NumberOfPlayers);
            StateHasChanged();
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }


    private Task AddPlayer(string name)
    {
        _scoreBoard.AddPlayer(name);
        return Task.CompletedTask;
    }

    private void Out(Player player)
    {
        _scoreBoard.Out(player);
    }

    private void Undo()
    {
        var restoreState = _memento.Undo();

        if (!string.IsNullOrEmpty(restoreState))
            _scoreBoard.LoadState(restoreState);
    }

    private void Redo()
    {
        var restoreState = _memento.Redo();

        if (!string.IsNullOrEmpty(restoreState)) 
            _scoreBoard.LoadState(restoreState);
    }

    private void ScoreBoardOnOnChange(object? sender, EventArgs e)
    {
        _memento.Push(_scoreBoard.ToString());
        _scoreAlgorithm = new ProcentProgressiveAlgorithm(1000, _scoreBoard.NumberOfPlayers);
        _prizeRows = _prizeTable.GetPrizeTable(_scoreBoard.NumberOfPlayers);
        
       Task.Run(async () =>  await JSRuntime.InvokeVoidAsync("localStorage.setItem", "STATE", _memento.ToString()));
    }

    public void Dispose()
    {
        _scoreBoard.OnChange -= ScoreBoardOnOnChange;
    }

    private Task StartPlaying()
    {
        _scoreBoard.StartPlaying();
        return Task.CompletedTask;
    }

    private string PrintPosition(Player player, int index)
    {
        if (player._position[index] == 0)
            return string.Empty;

        return $"# {player._position[index]}";
    }
    
    private string PrintScore(ScoreRow scoreRow, int index)
    {
        if (scoreRow.Player._position[index] == 0)
            return string.Empty;

        return $"{scoreRow.Scores[index]} p";
    }
}